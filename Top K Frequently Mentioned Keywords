private static List<String> solve(int k, String[] keywords, String[] reviews) {
List<String> res = new ArrayList<>();
Set<String> set = new HashSet<>();
      for(String key : keywords) {
        set.add(key.toLowerCase());
      }
Map<String, Integer> map = new HashMap<>();

for(String r : reviews) {
  String[] strs = r.split("\\s+");
  Set<String> added = new HashSet<>();
  for(String s : strs) {
    s = s.toLowerCase();
    if(set.contains(s) && !added.contains(s)) {
      map.put(s, map.getOrDefault(s, 0) + 1);
      added.add(s);
    }
  }
}

for (Map.Entry<String,Integer> entry : map.entrySet()) {
          System.out.println("Key = " + entry.getKey() +
                           ", Value = " + entry.getValue());
  }

Queue<Map.Entry<String, Integer>> maxHeap = new PriorityQueue<>(
    (a, b)->a.getValue() == b.getValue() ? a.getKey().compareTo(b.getKey()) : b.getValue() - a.getValue()
);
maxHeap.addAll(map.entrySet());
while(maxHeap.size() > 0 && k > 0) {
  res.add(maxHeap.poll().getKey());
  k--;
}
return res;
}
